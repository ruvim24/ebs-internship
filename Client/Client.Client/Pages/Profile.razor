@page "/profile"
@*@attribute [Authorize(Roles = "Admin")]*@
@using System.Net
@using Domain.Entities
@using Microsoft.AspNetCore.Authorization
@using Shared.Dtos.Users
@using MudBlazor

@inject HttpClient Http
@inject NavigationManager Navigation

<h3>User Details</h3>

@if (user == null)
{
    <p>Loading...</p>
}
else
{<div>
        <p><strong>Full Name:</strong> @user.FullName</p>
        <p><strong>Email:</strong> @user.Email</p>
        <p><strong>Phone Number:</strong> @user.PhoneNumber</p>
    </div>
}

@if (!string.IsNullOrEmpty(message))
{
    <MudAlert Severity="Severity.Error">@message</MudAlert>
}

@code {
    private UserDto user;
    private int Id = 6;
    private string message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync($"api/User/{Id}");
            
            if (response.IsSuccessStatusCode)
            {
                user = await response.Content.ReadFromJsonAsync<UserDto>();
            }
            else
            {
                if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    message = "Eroare: Cererea nu a fost validă (400).";
                }
                else if (response.StatusCode == HttpStatusCode.NotFound)
                {
                    message = "Utilizatorul nu a fost găsit (404).";
                }
                else
                {
                    message = "A apărut o eroare necunoscută. Te rugăm să încerci mai târziu.";
                }
            }
        }
        catch (Exception ex)
        {
            message = $"A apărut o eroare: {ex.Message}";
        }
    }
}
