@using System.Text.Json
@using API.Client.Services
@using Domain.Enums
@using Shared.Dtos.Services
@using Shared.Dtos.Users
@using Shared.Validators.Services
@inject ISnackbar Snackbar
@inject ServicesService ServicesService
@inject UserService UserService
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject AccountService AccountService
@inject MasterService MasterService

<MudDialog Style="height: 800px; width: 600px" >
    <TitleContent>
        Create Service
    </TitleContent>
    
    <DialogContent >
        @if (mastersExists)
        {
            <MudForm @ref="_form" Model="_createServiceDto" Validation="@(_createServiceDtoValidator.ValidateValue)">
                <MudTextField Label="Name" HelperText="Max. 15 characters"
                              @bind-Value="_createServiceDto.Name" For="@(() => _createServiceDto.Name)"/>
                <MudTextField Label="Description" Class="mt-3"
                              @bind-Value="_createServiceDto.Description" For="@(() => _createServiceDto.Description)"/>

                <MudSelect HelperText="Select duration" @bind-Value="_createServiceDto.Duration"
                           Required RequiredError="You must select Duration!!!" Margin="@Margin.Dense">
                    <MudSelectItem Value="30">30 min</MudSelectItem>
                    <MudSelectItem Value="60">60 min</MudSelectItem>
                    <MudSelectItem Value="90">90 min</MudSelectItem>
                </MudSelect>

                <MudTextField Label="Price" HelperText="Price must be greated than 0" Class="mt-3" @bind-Value="_createServiceDto.Price"
                              For="@(() => _createServiceDto.Price)"/>

                <MudSelect HelperText="Select Service Type" @bind-Value="_createServiceDto.ServiceType"
                           Required RequiredError="You must select a ServiceType !!!" Margin="@Margin.Dense">
                    <MudSelectItem Value="ServiceType.Consultation">Consultation</MudSelectItem>
                    <MudSelectItem Value="ServiceType.Maintenance">Maintenance</MudSelectItem>
                    <MudSelectItem Value="ServiceType.Reparation">Reparation</MudSelectItem>
                </MudSelect>

                <MudSelect HelperText="Select Master" @bind-Value="_createServiceDto.MasterId"
                           Required RequiredError="You must select a Master" Margin="@Margin.Dense">
                    @foreach (var master in _masters)
                    {
                        <MudSelectItem Value="master.Id">@master.FullName</MudSelectItem>
                    }
                </MudSelect>
            </MudForm>
        }
        else
        {
            <MudStack Direction="Row" Spacing="2">
                <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">No Master was registered. First register Master!</MudAlert>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Create" Color="Color.Primary" Size="Size.Small" OnClick="@(RegisterMaster)">Register Master here</MudButton>
            </MudStack>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
    
</MudDialog>



@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    IEnumerable<UserDto>? _masters;
    CreateServiceDtoValidator _createServiceDtoValidator = new();
    CreateServiceDto _createServiceDto = new();
    MudForm _form;
    bool mastersExists = true;

    private void Cancel() => MudDialog.Cancel();

    private void Submit()
    {
        if (_form.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(_createServiceDto));    
        }
        else
        {
            Snackbar.Add("Validation error", Severity.Error);
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        var response = await UserService.GetMastersAsync();
        if (response.IsSuccessStatusCode)
        {
            var mastersJson = await response.Content.ReadAsStringAsync();
            if (mastersJson != string.Empty)
            {
                var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
                
                _masters = JsonSerializer.Deserialize<IEnumerable<UserDto>>(mastersJson, options);
                
                var filteredMasters = await Task.WhenAll(
                    _masters.Select(async x => new 
                    {
                        User = x,
                        HasService = await MasterService.HasNotServiceAsync(x.Id)
                    })
                );

                // filter master wich has not service
                _masters = filteredMasters
                    .Where(x => x.HasService)
                    .Select(x => x.User)
                    .ToList();

            }
            else
            {
                Snackbar.Add("No masters registered", Severity.Info);
            }
        }
        else
        {
            mastersExists = false;
        }
    }

    private async Task RegisterMaster()
    {
        var dialog = DialogService.Show<RegisterMasterDialog>("Register Master");
        var result = await dialog.Result;
        if (!result!.Canceled)
        {
            var master = (RegisterDto)result.Data!;
            var response = await AccountService.RegisterMaster(master);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Succesefully registered Master", Severity.Success);
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
            else
            {
                Snackbar.Add("Error registering Master", Severity.Error);
            }
        }
    }

    
    
}

