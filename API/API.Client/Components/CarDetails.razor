@using System.Text.Json
@using API.Client.Services
@using Shared.Dtos
@using Shared.Dtos.Cars
@inject NavigationManager Navigation
@inject CarService CarService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@if (_carExists)
{
    <MudCard Elevation="4" Class="my-3">
        <MudCardHeader>
            <MudText Typo="Typo.h5" Align="Align.Center">Car Information</MudText>
        </MudCardHeader>

        <MudCardContent>

            <MudText Typo="Typo.body2" Align="Align.Start" Style="color: #555;">
                <strong>Maker:</strong>@carDetails?.Maker            
            </MudText>

            <MudText Typo="Typo.body2" Align="Align.Start" Style="color: #555;">
                <strong>Model: </strong>@carDetails?.Model
            </MudText>

            <MudText Typo="Typo.body2" Align="Align.Start" Style="color: #555;">
                <strong>PlateNumber: </strong>@carDetails?.PlateNumber
            </MudText>

            <MudText Typo="Typo.body2" Align="Align.Start" Style="color: #555;">
                <strong>VIN: </strong>@carDetails?.VIN
            </MudText>
            
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Filled" OnClick="EditCar" Color="Color.Primary">Edit</MudButton>
        </MudCardActions>
    </MudCard>

}
else
{
    <MudButton Variant="Variant.Filled" OnClick="CarRegistration" Color="Color.Primary">Register your car</MudButton>
}

@code {

    [Parameter] public int CustomerId { get; set; }
    bool _carExists;

    CarDto? carDetails { get; set; }
    UpdateCarDto? CarEdit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

    }
    
    public async Task LoadData()
    {
        var response = await CarService.GetCustumerCar(CustomerId);
        if (response.IsSuccessStatusCode)
        {
            string carJson = await response.Content.ReadAsStringAsync();

            var options = new JsonSerializerOptions()
            {
                PropertyNameCaseInsensitive = true
            };
            carDetails = JsonSerializer.Deserialize<CarDto>(carJson, options);
            _carExists = true;

            CarEdit = new UpdateCarDto()
            {
                Id = carDetails.Id,
                Maker = carDetails.Maker,
                Model = carDetails.Model,
                PlateNumber = carDetails.PlateNumber,
                VIN = carDetails.VIN
            };
        }
        else
        {
            _carExists = false;
        }
    }

    private async Task EditCar()
    {
        var parameters = new DialogParameters { { "carEdit", CarEdit } };

        var dialog = DialogService.Show<EditCarDialog>("Edit car information", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            CarEdit = (UpdateCarDto)result.Data!;
            var response = await CarService.UpdateCar(CarEdit);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Saved", Severity.Success);
                await LoadData();
            }
            else
            {
                Snackbar.Add("Saving error", Severity.Warning);
            }
        }
        else
        {
            Snackbar.Add("Edit canceled", Severity.Info);
        }
    }

    public async Task CarRegistration()
    {
        var dialog = DialogService.Show<CreateCarDialog>("Car registration");
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            var car = (CreateCarDto)result.Data!;

            car.CustomerId = CustomerId; //for current user

            var response = CarService.CreateCar(car);
            if (response.IsCompletedSuccessfully)
            {
                Snackbar.Add("Car was registred", Severity.Success);
                await LoadData();
            }
            else
            {
                Snackbar.Add("Registration error", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Car registration canceled", Severity.Info);
        }
    }

    
}