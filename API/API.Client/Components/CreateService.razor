@using System.Text.Json
@using API.Client.Services
@using Domain.Enums
@using Shared.Dtos.Services
@using Shared.Dtos.Users
@inject ISnackbar Snackbar
@inject ServicesService ServicesService
@inject UserService UserService

<MudDialog Style="height: 800px; width: 600px" >
    <TitleContent>
        Create Service
    </TitleContent>
    
    <DialogContent >@*
        <EditForm FormName="Create Service" Model="@createServiceDto" OnValidSubmit="OnValidSubmit">
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudCard Style="height: 500px; width: 500px">
                        <MudCardContent>*@
                            <MudTextField Label="Name" HelperText="Max. 15 characters"
                                          @bind-Value="createServiceDto.Name" For="@(() => createServiceDto.Name)"/>
                            <MudTextField Label="Description" Class="mt-3"
                                          @bind-Value="createServiceDto.Description" For="@(() => createServiceDto.Description)"/>

                            <MudSelect HelperText="Select duration" @bind-Value="createServiceDto.Duration" Required RequiredError="You must select Duration!!!" Margin="@Margin.Dense">
                                <MudSelectItem Value="30">30 min</MudSelectItem>
                                <MudSelectItem Value="60">60 min</MudSelectItem>
                                <MudSelectItem Value="90">90 min</MudSelectItem>
                            </MudSelect>

                            <MudTextField Label="Price" HelperText="Price must be greated than 0" Class="mt-3"
                                          @bind-Value="createServiceDto.Price" For="@(() => createServiceDto.Price)"/>

                            <MudSelect HelperText="Select Service Type" @bind-Value="createServiceDto.ServiceType" Required RequiredError="You must select a ServiceType !!!" Margin="@Margin.Dense">
                                <MudSelectItem Value="ServiceType.Consultation">Consultation</MudSelectItem>
                                <MudSelectItem Value="ServiceType.Maintenance">Maintenance</MudSelectItem>
                                <MudSelectItem Value="ServiceType.Reparation">Reparation</MudSelectItem>
                            </MudSelect>
                            
                            <MudSelect HelperText="Select Master" @bind-Value="createServiceDto.MasterId" Required RequiredError="You must select a Master" Margin="@Margin.Dense">
                                @foreach (var master in masters)
                                {
                                    <MudSelectItem Value="master.Id">@master.FullName</MudSelectItem>
                                }
                            </MudSelect>

                        @*</MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>#2##1#*@
        </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
    
</MudDialog>



@code {
 //to add fluent validaton
 //
    
    CreateServiceDto createServiceDto = new CreateServiceDto(); 
    
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(createServiceDto));

    private void Cancel() => MudDialog.Cancel();

    IEnumerable<UserDto> masters;

    protected override async Task OnInitializedAsync()
    {
        //extragerea din baza de date lista de Masteri --- !!!!!!
        var response = await UserService.GetMastersAsync();
        if (response.IsSuccessStatusCode)
        {
            var mastersJson = await response.Content.ReadAsStringAsync();
            if (mastersJson != string.Empty)
            {
                var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
                masters = JsonSerializer.Deserialize<IEnumerable<UserDto>>(mastersJson, options);

            }
            Snackbar.Add("No masters registered", Severity.Info);

        }
        //nu sunt masteri - nu poti crea un serviciu
    }


    private void OnValidSubmit(EditContext context)
    {
        Snackbar.Add("Service was saved", Severity.Success);
        StateHasChanged();
    }
}