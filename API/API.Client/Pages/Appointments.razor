@page "/appointments"
@using System.Text.Json
@using API.Client.Components
@using API.Client.Services
@using Domain.Enums
@using Microsoft.AspNetCore.Authorization
@using Shared.Dtos.Appointments
@attribute [Authorize(Roles = "Customer")]
@inject AccountService AccountService
@inject CarService CarService
@inject AppointmentService AppointmentService
@inject SlotsService SlotsService
@inject ServicesService ServicesService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService

<AuthorizeView Roles="Customer">
    <Authorized>
        <MudItem>
            <MudText Color="Color.Primary" Typo="Typo.h4" Align="Align.Left" Style="margin-bottom: 20px;">
                My Appointments
            </MudText>
            <br/>
        </MudItem>
        
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined" NoIcon="true" ContentAlignment="HorizontalAlignment.Left"><strong>Filter</strong></MudAlert>
            <MudButton>@buttonText</MudButton>
            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                <MudMenuItem OnClick="ApplayScheduledFilter">Scheduled</MudMenuItem>
                <MudMenuItem OnClick="ApplayCancelFilter">Canceled</MudMenuItem>
                <MudMenuItem OnClick="ApplayCompletedFilter">Completed</MudMenuItem>
                <MudMenuItem OnClick="ApplayAllFilter">All</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>
        
        <MudGrid Justify="Justify.FlexStart"  Spacing="3">
            @if (isLoading)
            {
            <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7"/>
            }
            else if (!hasAppointments)
            {
            <MudAlert ContentAlignment="HorizontalAlignment.Left" Variant="Variant.Outlined" Severity="Severity.Info" Class="my-3">No Appointments Exists</MudAlert>
            }
            else
            {
            @foreach (var appointment in displyAppointments)
            {
            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="4" Class="my-3">
                    <MudCardContent>
                        <MudText Typo="Typo.h6" Align="Align.Start" Style="color: #333; margin-bottom: 10px;">
                            @(appointment.Name)
                        </MudText>

                        <MudText Typo="Typo.body2" Align="Align.Start" Style="color: #555; margin-top: 8px;">
                            <strong>Date:</strong>
                            @(appointment.StartTime.Date.ToString("d"))
                            <strong>Time:</strong>
                            @($"{appointment.StartTime.ToString("t")} - {appointment.EndTime.ToString("t")}")
                        </MudText>

                        <MudText Typo="Typo.body2" Align="Align.Start" Style="color: #555; margin-top: 8px;">
                            <strong>Price:</strong>
                            @($"${appointment.Price}")
                        </MudText>
                        
                        <MudText Typo="Typo.body2" Align="Align.Start" Style="color: #555; margin-top: 8px;">
                            <strong>Created At:</strong> @appointment.CreatedAt.ToString("g")
                        </MudText>
                    </MudCardContent>

                    @if (appointment.Status == AppointmentStatus.Scheduled)
                    {
                        <MudAlert Variant="Variant.Outlined" Severity="Severity.Success" NoIcon="true" Class="my-2">Scheduled</MudAlert>

                        <MudCardActions>
                        <MudButton OnClick="() => CancelAppointment(appointment.Id)" Variant="Variant.Filled" Color="Color.Secondary">Cancel</MudButton>
                        </MudCardActions>
                    }
                    else if (appointment.Status == AppointmentStatus.Completed)
                    {
                        <MudAlert Variant="Variant.Outlined" Severity="Severity.Info" NoIcon="true" Class="my-2">Completed</MudAlert>
                    }
                    else
                    {
                        <MudAlert Variant="Variant.Outlined" Severity="Severity.Error" NoIcon="true" Class="my-2">Canceld</MudAlert>
                    }
                </MudCard>
            </MudItem>
            }
            }
        </MudGrid>

    </Authorized>
    
    <NotAuthorized>
        <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined" Class="my-3">
            Not Autorized
        </MudAlert>
    </NotAuthorized>
</AuthorizeView>




@code {

    bool isLoading;
    bool hasAppointments;
    List<CustumerAppointmentDto>? customersAppointments;
    List<CustumerAppointmentDto> displyAppointments;
    
    string buttonText;
    
    
    protected override async Task OnInitializedAsync()
    {
        await LoadingData();
    }

    public void ApplayScheduledFilter()
    {
        buttonText = "Scheduled";
        displyAppointments = customersAppointments.FindAll(x => x.Status == AppointmentStatus.Scheduled);
        StateHasChanged();
    }
    public void ApplayCancelFilter()
    {
        buttonText = "Canceled";
        displyAppointments = customersAppointments.FindAll(x => x.Status == AppointmentStatus.Canceled);
        StateHasChanged();
    }
    public void ApplayCompletedFilter()
    {
        buttonText = "Completed";
        displyAppointments = customersAppointments.FindAll(x => x.Status == AppointmentStatus.Completed);
        StateHasChanged();
    }

    public void ApplayAllFilter()
    {
        buttonText = "All";
        displyAppointments = customersAppointments;
        StateHasChanged();
    }
    
    private async Task CancelAppointment(int appointmentId)
    {
        var dialog = DialogService.Show<ConfirmationDialog>("Are you sure??");
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            var response = await AppointmentService.CancelAppointment(appointmentId);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Appointment canceled", Severity.Info);
                await LoadingData();
            }
            else
            {
                Snackbar.Add("Error to cancel Appointment", Severity.Error);
            }
        }
        
    }

    private async Task LoadingData()
    {
        isLoading = true;
        var response = await AppointmentService.GetCustomerAppointments();
        if (response.IsSuccessStatusCode)
        {
            customersAppointments = JsonSerializer.Deserialize<List<CustumerAppointmentDto>>(
                await response.Content.ReadAsStringAsync(),
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true }
            );

            if (customersAppointments.Any())
            {
                //sorting
                customersAppointments = customersAppointments!
                    .OrderBy(a => a.StartTime)
                    .ToList();
            
                hasAppointments = true;
                ApplayScheduledFilter();
            }            
        }

        isLoading = false;
    }

}