@page "/personalCabinet"
@attribute [Authorize]
@using API.Client.Components
@using API.Client.Services
@using Microsoft.AspNetCore.Authorization
@using Shared.Dtos.Users
@inject IDialogService DialogService
@inject AccountService AccountService
@inject UserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation


<MudGrid Spacing="3" Justify="Justify.FlexStart" AlignItems="Center">
    <MudItem xs="12" sm="6" md="5">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h5" Align="Align.Center">Personal Information</MudText>
            </MudCardHeader>
            
            <MudCardContent>
                <MudText Typo="Typo.body2" Align="Align.Start" Style="color: #555;">
                    <strong>Name:</strong>
                    @(userInfo.FullName)
                </MudText>
                
                <MudText Typo="Typo.body2" Align="Align.Start" Style="color: #555;">
                    <strong>Email:</strong>
                    @(userInfo.Email)
                </MudText>

                <MudText Typo="Typo.body2" Align="Align.Start" Style="color: #555;">
                    <strong>Name:</strong>
                    @(userInfo.PhoneNumber)
                </MudText>
            </MudCardContent>
            
            @*<MudCardActions Style="text-align: center;">
                <MudButton Variant="Variant.Filled" OnClick="EditUser" Color="Color.Info">Edit</MudButton>
            </MudCardActions>*@
        </MudCard>

        <AuthorizeView Roles="Customer">
            <Authorized>
                @if (userInfo != null)
                {
                    <CarDetails CustomerId="@userInfo.Id"/>
                }
            </Authorized>
        </AuthorizeView>
    </MudItem>
    
</MudGrid>


@code {
    UserDto? userInfo;
    UpdateUserDto? userEdit;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    public async Task LoadData()
    {
        userInfo = await AccountService.GetLoggedInUser();
    }
    
    private async Task EditUser()
    {
        userEdit = new UpdateUserDto()
        {
            Id = userInfo.Id,
            Email = userInfo.Email,
            Password = string.Empty,
            PhoneNumber = userInfo.PhoneNumber
        };
        
        var parameters = new DialogParameters { { "userEdit", userEdit } };

        var dialog = DialogService.Show<EditUserDialog>("Edit personal information", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            userEdit = (UpdateUserDto)result.Data!;
            var response = await UserService.UpdateUserAsync(userEdit);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Saved", Severity.Success);           
                await LoadData();
            }
            else
            {
                Snackbar.Add("Saving error", Severity.Warning);
            }
        }
        else
        {
            Snackbar.Add("Canceled", Severity.Info);
        }
    }
}
