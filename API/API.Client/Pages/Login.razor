@page "/login"
@using API.Client.Services
@using Shared.Dtos.Users
@using Shared.Validators.Users
@inject NavigationManager Navigation
@inject AccountService AccountService
@inject ISnackbar Snackbar


<h3>Test</h3>

<MudContainer MaxWidth="MaxWidth.Medium" Style="display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #e3f2fd;">

    <MudCard Elevation="6" Style="width: 100%; max-width: 500px; padding: 30px; border-radius: 15px; background-color: #ffffff;">
        <MudCardContent>
            <MudText Typo="Typo.h5" Align="Align.Center" Style="color: #1976d2;">Login</MudText>
            <MudForm Model="@model" @ref="@form" Validation="@(loginValidator.ValidateValue)" ValidationDelay="0">
                <MudCardContent>
                    <MudTextField @bind-Value="model.Username"
                              For="@(() => model.Username)"
                              Immediate="true"
                              Label="Username"/>

                    <MudTextField @bind-Value="model.Password"
                                  For="@(() => model.Password)"
                                  Immediate="true"
                                  Label="Password"
                                  InputType="InputType.Password"/>
                </MudCardContent>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" Style="margin-top: 16px;" OnClick="@(async () => await HandleLogin())">Login</MudButton>
        </MudCardActions>
        <MudItem xs="12" Style="text-align: center; margin-top: 10px;">
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="NavigateToRegister">
                Don't have an account? Register here
            </MudButton>
        </MudItem>
    </MudCard>
</MudContainer>


@code
{
    private MudForm form;
    private bool isValid;
    private LoginDto model = new LoginDto();

    LoginDtoValidator loginValidator = new LoginDtoValidator();
    
    private async Task HandleLogin()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var response = await AccountService.Login(model);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Succesefull Login", Severity.Success);
                Navigation.NavigateTo("/personalCabinet");
            }
            else
            {
                Snackbar.Add("Error while logging", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Validation error", Severity.Error);

        }
    }
    
    public void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }
    
   
}
